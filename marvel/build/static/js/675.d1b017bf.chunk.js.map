{"version":3,"file":"static/js/675.d1b017bf.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      style={{\n        display: \"block\",\n        width: \"250px\",\n        height: \"250px\",\n        objectFit: \"contain\",\n        margin: \"0 auto\",\n      }}\n      src={img}\n      alt=\"Error\"\n    />\n  );\n};\n\nexport default ErrorMessage;\n","import { useState, useEffect } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState(null);\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 50000);\n\n    return () => clearInterval(timerId);\n    // eslint-disable-next-line\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n    getCharacter(id).then(onCharLoaded);\n  };\n\n  const reducedText = (text, maxLength) => {\n    return text.length > maxLength ? text.slice(0, maxLength) + \"...\" : text;\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? (\n    <View char={char} reducedText={reducedText} />\n  ) : null;\n\n  return (\n    <div className=\"randomchar\">\n      {errorMessage}\n      {spinner}\n      {content}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button className=\"button button__main\" onClick={updateChar}>\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ char, reducedText }) => {\n  const { name, description, thumbnail, homepage, wiki } = char;\n\n  const reducedDescription = reducedText(\n    description || \"There are no description about this character.\",\n    200\n  );\n\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className=\"randomchar__img\"\n        style={imgStyle}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{reducedDescription}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport \"./charList.scss\";\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { loading, error, getAllCharacters } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n    // eslint-disable-next-line\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset).then(onCharListLoaded);\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList((charList) => [...charList, ...newCharList]);\n    setNewItemLoading((newItemLoading) => false);\n    setOffset((offset) => offset + 9);\n    setCharEnded((charEnded) => ended);\n  };\n\n  console.log(\"charList!\");\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n    // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n    // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n    // в отдельный компонент. Но кода будет больше, появится новое состояние\n    // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n    // По возможности, не злоупотребляйте рефами, только в крайних случаях\n    itemRefs.current.forEach((item) =>\n      item.classList.remove(\"char__item_selected\")\n    );\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n      if (\n        item.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ) {\n        imgStyle = { objectFit: \"unset\" };\n      }\n\n      return (\n        <li\n          className=\"char__item\"\n          tabIndex={0}\n          ref={(el) => {\n            itemRefs.current[i] = el;\n          }}\n          key={i} ////// щось не так\n          onClick={() => {\n            props.onCharSelected(item.id);\n            focusOnItem(i);\n          }}\n        >\n          <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n          <div className=\"char__name\">{item.name}</div>\n        </li>\n      );\n    });\n    // А эта конструкция вынесена для центровки спиннера/ошибки\n    return <ul className=\"char__grid\">{items}</ul>;\n  }\n\n  const items = renderItems(charList);\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n  return (\n    <div className=\"char__list\">\n      {errorMessage}\n      {spinner}\n      {items}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    // eslint-disable-next-line\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n    clearError();\n    getCharacter(charId).then(onCharLoaded);\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const skeleton = char || loading || error ? null : <Skeleton />;\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"char__info\">\n      {skeleton}\n      {errorMessage}\n      {spinner}\n      {content}\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\n        {comics.map((item, i) => {\n          const urlParts = item.resourceURI.split(\"/\");\n          const comicId = urlParts[urlParts.length - 1];\n          return (\n            <li key={i} className=\"char__comics-item\">\n              <Link to={`/comics/${comicId}`}>{item.name}</Link>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default CharInfo;\n","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n  state = {\n    error: false,\n  };\n\n  static getDerivedStateFromError() {\n    return { error: true };\n  }\n\n  componentDidCatch(error, info) {\n    console.log(error, info);\n    this.setState({ error: true });\n  }\n\n  render() {\n    if (this.state.error === true) {\n      return <ErrorMessage />;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import { useState } from \"react\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from \"../../resources/img/vision.png\";\n\nconst MainPage = () => {\n  const [selectedChar, setSelectedChar] = useState(null);\n\n  const onCharSelected = (id) => {\n    setSelectedChar(id);\n  };\n\n  return (\n    <>\n      <ErrorBoundary>\n        <RandomChar />\n      </ErrorBoundary>\n      <div className=\"char__content\">\n        <CharList onCharSelected={onCharSelected} />\n        <ErrorBoundary>\n          <CharInfo charId={selectedChar} />\n        </ErrorBoundary>\n      </div>\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n    </>\n  );\n};\n\nexport default MainPage;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = useCallback(\n    async (\n      url,\n      method = \"GET\",\n      body = null,\n      headers = { \"Content-Type\": \"application/json\" }\n    ) => {\n      setLoading(true);\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status ${response.status}`);\n        }\n        const data = await response.json();\n\n        setLoading(false);\n        return data;\n      } catch (err) {\n        setLoading(false);\n        setError(err.message);\n        throw err;\n      }\n    },\n    []\n  );\n  const clearError = useCallback(() => setError(null), []);\n  return { request, loading, error, clearError };\n};\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n  const { loading, request, error, clearError } = useHttp();\n\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n  const _apiKey = \"apikey=35e2adbc5d03d90ded013921723230bb\";\n  const _baseOffset = 210;\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const res = await request(\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n    );\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async (id) => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const getAllComics = async (offset = 0) => {\n    const res = await request(\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n    );\n    return res.data.results.map(_transformComic);\n  };\n\n  const getComic = async (id) => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    return _transformComic(res.data.results[0]);\n  };\n\n  const _transformCharacter = (char) => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description,\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n  const _transformComic = (comics) => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || \"There is no description\",\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} p.`\n        : \"No information about the number of pages\",\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      language: comics.textObjects[0]?.language || \"en-us\",\n      price: comics.prices[0].price\n        ? `${comics.prices[0].price}$`\n        : \"not available\",\n    };\n  };\n\n  return {\n    getAllCharacters,\n    getCharacter,\n    getAllComics,\n    getComic,\n    loading,\n    error,\n    clearError,\n  };\n};\n\nexport default useMarvelService;\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","reducedText","name","description","thumbnail","homepage","wiki","reducedDescription","imgStyle","_jsxs","className","children","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","text","maxLength","length","slice","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","console","log","itemRefs","useRef","items","arr","map","item","i","tabIndex","ref","el","current","onCharSelected","forEach","classList","remove","add","focus","renderItems","disabled","Skeleton","_Fragment","comics","urlParts","resourceURI","split","comicId","Link","to","concat","charId","skeleton","ErrorBoundary","Component","constructor","arguments","state","getDerivedStateFromError","componentDidCatch","info","this","setState","render","MainPage","selectedChar","setSelectedChar","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","err","message","_apiBase","_apiKey","_transformCharacter","path","extension","urls","_transformComic","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","results","res","getAllComics","getComic"],"sourceRoot":""}